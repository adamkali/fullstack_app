// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: user.sql

package repository

import (
	"context"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  email, username, created_datetime, updated_datetime, profile_pic_url, admin, b_crypt_hash 
) VALUES ($1, $2, now(), now(), NULL, false, $3)
RETURNING id, email, username, created_datetime, updated_datetime, profile_pic_url, admin, b_crypt_hash
`

type CreateUserParams struct {
	Email      string `json:"email"`
	Username   string `json:"username"`
	BCryptHash string `json:"b_crypt_hash"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Email, arg.Username, arg.BCryptHash)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.CreatedDatetime,
		&i.UpdatedDatetime,
		&i.ProfilePicUrl,
		&i.Admin,
		&i.BCryptHash,
	)
	return i, err
}

const createUserAdmin = `-- name: CreateUserAdmin :one
INSERT INTO users (
  email, username, created_datetime, updated_datetime, profile_pic_url, admin, b_crypt_hash
) VALUES ($1, $2, now(), now(), NULL, true, $3)
RETURNING id, email, username, created_datetime, updated_datetime, profile_pic_url, admin, b_crypt_hash
`

type CreateUserAdminParams struct {
	Email      string `json:"email"`
	Username   string `json:"username"`
	BCryptHash string `json:"b_crypt_hash"`
}

func (q *Queries) CreateUserAdmin(ctx context.Context, arg CreateUserAdminParams) (User, error) {
	row := q.db.QueryRow(ctx, createUserAdmin, arg.Email, arg.Username, arg.BCryptHash)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.CreatedDatetime,
		&i.UpdatedDatetime,
		&i.ProfilePicUrl,
		&i.Admin,
		&i.BCryptHash,
	)
	return i, err
}

const deleteUserByID = `-- name: DeleteUserByID :exec
DELETE FROM users WHERE id = $1
`

func (q *Queries) DeleteUserByID(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteUserByID, id)
	return err
}

const findBCryptHashByEmail = `-- name: FindBCryptHashByEmail :one
SELECT b_crypt_hash
    FROM users
    Where email = $1
`

func (q *Queries) FindBCryptHashByEmail(ctx context.Context, email string) (string, error) {
	row := q.db.QueryRow(ctx, findBCryptHashByEmail, email)
	var b_crypt_hash string
	err := row.Scan(&b_crypt_hash)
	return b_crypt_hash, err
}

const findBCryptHashByUsername = `-- name: FindBCryptHashByUsername :one
SELECT b_crypt_hash
    FROM users
    Where username = $1
`

func (q *Queries) FindBCryptHashByUsername(ctx context.Context, username string) (string, error) {
	row := q.db.QueryRow(ctx, findBCryptHashByUsername, username)
	var b_crypt_hash string
	err := row.Scan(&b_crypt_hash)
	return b_crypt_hash, err
}

const findUserByEmail = `-- name: FindUserByEmail :one
SELECT id, email, username, created_datetime, updated_datetime, profile_pic_url, admin, b_crypt_hash
    FROM users 
    WHERE email = $1
`

func (q *Queries) FindUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, findUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.CreatedDatetime,
		&i.UpdatedDatetime,
		&i.ProfilePicUrl,
		&i.Admin,
		&i.BCryptHash,
	)
	return i, err
}

const findUserByID = `-- name: FindUserByID :one
SELECT id, email, username, created_datetime, updated_datetime, profile_pic_url, admin, b_crypt_hash FROM users WHERE id = $1
`

func (q *Queries) FindUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, findUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.CreatedDatetime,
		&i.UpdatedDatetime,
		&i.ProfilePicUrl,
		&i.Admin,
		&i.BCryptHash,
	)
	return i, err
}

const findUserByUsername = `-- name: FindUserByUsername :one
SELECT id, email, username, created_datetime, updated_datetime, profile_pic_url, admin, b_crypt_hash
    FROM users 
    WHERE username = $1
`

func (q *Queries) FindUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, findUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.CreatedDatetime,
		&i.UpdatedDatetime,
		&i.ProfilePicUrl,
		&i.Admin,
		&i.BCryptHash,
	)
	return i, err
}

const findUsers = `-- name: FindUsers :many
SELECT id, email, username, created_datetime, updated_datetime, profile_pic_url, admin, b_crypt_hash FROM users
`

func (q *Queries) FindUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, findUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Username,
			&i.CreatedDatetime,
			&i.UpdatedDatetime,
			&i.ProfilePicUrl,
			&i.Admin,
			&i.BCryptHash,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
