// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: token.sql

package repository

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createToken = `-- name: CreateToken :one
INSERT INTO tokens (
    user_id, expiration_datetime, token
) VALUES ( $1, $2, $3 )
RETURNING id, user_id, expiration_datetime, token
`

type CreateTokenParams struct {
	UserID             uuid.UUID  `json:"user_id"`
	ExpirationDatetime *time.Time `json:"expiration_datetime"`
	Token              string     `json:"token"`
}

func (q *Queries) CreateToken(ctx context.Context, arg CreateTokenParams) (Token, error) {
	row := q.db.QueryRow(ctx, createToken, arg.UserID, arg.ExpirationDatetime, arg.Token)
	var i Token
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ExpirationDatetime,
		&i.Token,
	)
	return i, err
}

const findTokenByToken = `-- name: FindTokenByToken :one
SELECT id, user_id, expiration_datetime, token
    FROM tokens 
    WHERE token = $1
    AND now() > expiration_datetime
`

func (q *Queries) FindTokenByToken(ctx context.Context, token string) (Token, error) {
	row := q.db.QueryRow(ctx, findTokenByToken, token)
	var i Token
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ExpirationDatetime,
		&i.Token,
	)
	return i, err
}

const findTokenByUserId = `-- name: FindTokenByUserId :one
SELECT id, user_id, expiration_datetime, token
    FROM tokens 
    WHERE user_id = $1
    AND now() > expiration_datetime
`

func (q *Queries) FindTokenByUserId(ctx context.Context, userID uuid.UUID) (Token, error) {
	row := q.db.QueryRow(ctx, findTokenByUserId, userID)
	var i Token
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ExpirationDatetime,
		&i.Token,
	)
	return i, err
}

const updateTokenByUserId = `-- name: UpdateTokenByUserId :exec
UPDATE tokens 
    SET token = $1, expiration_datetime = $2
    WHERE user_id = $3
`

type UpdateTokenByUserIdParams struct {
	Token              string     `json:"token"`
	ExpirationDatetime *time.Time `json:"expiration_datetime"`
	UserID             uuid.UUID  `json:"user_id"`
}

func (q *Queries) UpdateTokenByUserId(ctx context.Context, arg UpdateTokenByUserIdParams) error {
	_, err := q.db.Exec(ctx, updateTokenByUserId, arg.Token, arg.ExpirationDatetime, arg.UserID)
	return err
}
